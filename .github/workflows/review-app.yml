name: "Deploys a review app for a specific PR"

on:
  workflow_call:
    inputs:
      pr:
        description: "The PR to deploy the review app for"
        type: string
      projectname:
        description: "The name of the project used in the review app url"
        type: string
        required: true
      environment:
        type: string
        description: "environment"
        required: false
      artifact-name:
        type: string
        default: web
        required: false

jobs:
  deploy_review_app:
    #needs: create_environment
    if: ${{ inputs.pr }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: "https://${{ inputs.projectname }}-pr-${{ inputs.pr }}.web-review.famedly.de"
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: public
      - name: Copying app
        shell: bash
        run: |
          eval `ssh-agent -s`
          echo '${{ secrets.FRONTEND_REVIEW_APP_SSH_KEY }}' | ssh-add -
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          rsync -av --delete public/ "web-review@web-review.famedly.de:/opt/web-review/web/${{inputs.projectname}}-pr-${{ inputs.pr }}"
          echo "Review app can be found here: [App](https://${{inputs.projectname}}-pr-${{ inputs.pr }}.web-review.famedly.de)" >> $GITHUB_STEP_SUMMARY

  qa_app:
    if: contains(github.ref_name, 'rc')
    #needs: create_environment
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: "https://qa-${{ inputs.projectname }}.web-review.famedly.de"
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: public
      - name: Copying app
        shell: bash
        run: |
          eval `ssh-agent -s`
          echo '${{ secrets.FRONTEND_REVIEW_APP_SSH_KEY }}' | ssh-add -
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          rsync -av --delete public/ "web-review@web-review.famedly.de:/opt/web-review/web/qa-${{inputs.projectname}}"
          echo "QA app can be found here: [App](https://qa-${{inputs.projectname}}.web-review.famedly.de)" >> $GITHUB_STEP_SUMMARY

  cleanup_review_app:
    # deletes all review apps, where the corresponding PR has been closed already
    runs-on: ubuntu-latest
    steps:
      - run: |
          eval `ssh-agent -s`
          echo '${{ secrets.FRONTEND_REVIEW_APP_SSH_KEY }}' | ssh-add -
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

          gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" '/repos/${{github.repository}}/deployments?environment=${{ inputs.environment }}' | jq -c 'group_by(.ref) | map({ref: .[0].ref, deployments: map(.id) | join(" ")}) | .[]' > deployments
          while IFS=$"\\n" read -r deployment; do
              ref=$(echo "$deployment" | jq -r '.ref')
              echo "Cleaning deployments for $ref"
              gh api --paginate -X GET -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" '/repos/${{github.repository}}/pulls' -f "head=famedly:$ref" -f "state=closed" | jq  '.[].number' > prs
              for pr in $(cat prs); do
                echo "Deleting review app for PR $pr"
                ssh web-review@web-review.famedly.de rm -rf "/opt/web-review/web/${{inputs.projectname}}-pr-${pr}"
              done

              if [ -s prs ]; then
                for d in $(echo "$deployment" | jq -r '.deployments' ); do
                  echo "Destroying deployment $d"
                  gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/${{ github.repository }}/deployments/${d}/statuses" -f state='inactive'
                  echo "Deleting deployment $d"
                  gh api --method DELETE -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/${{ github.repository }}/deployments/${d}"
                done
              fi
              echo "Finished cleaning deployments for $ref"
          done < deployments
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
